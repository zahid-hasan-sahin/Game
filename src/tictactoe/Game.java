/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tictactoe;

import java.awt.Image;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class Game extends javax.swing.JFrame {

    /**
     * Creates new form SetUp
     */
    boolean turn = true;
    int[][] matrix = new int[3][3];
    boolean stop = false;

    public Game() {

        initComponents();
          setResizable(false);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                setVisible(true);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(250, 30));
        setMinimumSize(new java.awt.Dimension(750, 650));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(jPanel1);
        jPanel1.setBounds(160, 170, 370, 10);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(jPanel3);
        jPanel3.setBounds(160, 300, 370, 10);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(jPanel5);
        jPanel5.setBounds(260, 90, 10, 310);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(jPanel2);
        jPanel2.setBounds(410, 90, 10, 310);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setAlignmentY(0.0F);
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jLabel3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel3KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jLabel3KeyReleased(evt);
            }
        });
        getContentPane().add(jLabel3);
        jLabel3.setBounds(120, 60, 140, 110);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel4);
        jLabel4.setBounds(270, 60, 140, 110);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel5);
        jLabel5.setBounds(420, 60, 150, 110);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel6);
        jLabel6.setBounds(120, 180, 140, 120);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel7);
        jLabel7.setBounds(270, 180, 140, 120);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel8);
        jLabel8.setBounds(420, 180, 140, 120);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel10);
        jLabel10.setBounds(270, 310, 140, 100);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setToolTipText("");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel9);
        jLabel9.setBounds(420, 310, 140, 100);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel11);
        jLabel11.setBounds(120, 310, 140, 100);

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(150, 460, 80, 40);

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(290, 460, 80, 40);

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(430, 460, 80, 40);

        jLabel1.setFont(new java.awt.Font("Sitka Text", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Computer Mode");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(260, 10, 260, 40);

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(220, 50, 270, 20);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/bg.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, -10, 750, 650);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel3KeyPressed

    }//GEN-LAST:event_jLabel3KeyPressed

    private void jLabel3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel3KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel3KeyReleased

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        if (jLabel3.getIcon() == null && turn) {
            jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[0][0] = 1;
            turn = !turn;
        }
        gameLogic();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        if (jLabel4.getIcon() == null && turn) {
            jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[0][1] = 1;
            turn = !turn;
        }
        gameLogic();
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        if (jLabel5.getIcon() == null && turn) {
            jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[0][2] = 1;
            turn = !turn;
        }
        gameLogic();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        if (jLabel6.getIcon() == null && turn) {
            jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[1][0] = 1;
            turn = !turn;
        }
        gameLogic();

    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        if (jLabel7.getIcon() == null && turn) {
            jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[1][1] = 1;
            turn = !turn;
        }
        gameLogic();

    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        if (jLabel8.getIcon() == null && turn) {
            jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[1][2] = 1;
            turn = !turn;
        }

        gameLogic();
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        if (jLabel11.getIcon() == null && turn) {
            jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[2][0] = 1;
            turn = !turn;
        }
        gameLogic();
    }//GEN-LAST:event_jLabel11MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        if (jLabel10.getIcon() == null && turn) {
            jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[2][1] = 1;
            turn = !turn;
        }
        gameLogic();
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        if (jLabel9.getIcon() == null && turn) {
            jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/o.png")));
            matrix[2][2] = 1;
            turn = !turn;
        }

        gameLogic();

    }//GEN-LAST:event_jLabel9MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        new Game().setVisible(true);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        System.exit(0);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        stop = true;
        this.dispose();
        new SetUp().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        Game ob = new Game();
        /* Create and display the form */

    }

    boolean mark(int row, int col) {
        if (matrix[row][col] == 0) {
            if (row == 0 && col == 0) {
                jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            } else if (row == 0 && col == 1) {
                jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            } else if (row == 0 && col == 2) {
                jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            } else if (row == 1 && col == 0) {
                jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            } else if (row == 1 && col == 1) {
                jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            } else if (row == 1 && col == 2) {
                jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            } else if (row == 2 && col == 0) {
                jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            } else if (row == 2 && col == 1) {
                jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            } else if (row == 2 && col == 2) {
                jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tictactoe/x.png")));
                matrix[row][col] = 2;
                return true;
            }
        }
        return false;
    }

    boolean checkRow() {
        for (int i = 0; i < 3; i++) {
            int me = 0;
            int other = 0;
            for (int j = 0; j < 3; j++) {
                if (matrix[i][j] == 1) {
                    ++me;
                } else if (matrix[i][j] == 2) {
                    ++other;
                }
            }
            if (me == 3) {
                JOptionPane.showMessageDialog(null, "You Won", "Won", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
                new Game().setVisible(true);
                return true;

            }
            if (other == 3) {
                JOptionPane.showMessageDialog(null, "You Lose", "Lose", JOptionPane.ERROR_MESSAGE);
                this.dispose();
                new Game().setVisible(true);
                return true;

            }
        }
        return false;
    }

    boolean checkCol() {
        for (int i = 0; i < 3; i++) {
            int me = 0;
            int other = 0;
            for (int j = 0; j < 3; j++) {
                if (matrix[j][i] == 1) {
                    ++me;
                } else if (matrix[j][i] == 2) {
                    ++other;
                }
            }
            if (me == 3) {
                JOptionPane.showMessageDialog(null, "You Won", "Won", JOptionPane.INFORMATION_MESSAGE);

                this.dispose();
                new Game().setVisible(true);

                return true;

            }
            if (other == 3) {
                JOptionPane.showMessageDialog(null, "You Lose", "Lose", JOptionPane.ERROR_MESSAGE);

                this.dispose();
                new Game().setVisible(true);

                return true;

            }
        }
        return false;
    }

    boolean checkDig() {

        int me = 0;
        int other = 0;
        for (int i = 0; i < 3; i++) {
            if (matrix[i][i] == 1) {
                ++me;
            }
            if (matrix[i][i] == 2) {
                ++other;
            }
        }

        if (me == 3) {
            JOptionPane.showMessageDialog(null, "You Won", "Won", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
            new Game().setVisible(true);

            return true;

        }
        if (other == 3) {
            JOptionPane.showMessageDialog(null, "You Lose", "Lose", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            new Game().setVisible(true);

            return true;
        }

        me = 0;
        other = 0;
        for (int i = 0, j = 2; i < 3; i++, j--) {
            if (matrix[i][j] == 1) {
                ++me;
            }
            if (matrix[i][j] == 2) {
                ++other;
            }
        }
        if (me == 3) {
            JOptionPane.showMessageDialog(null, "You Won", "Won", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
            new Game().setVisible(true);

            return true;
        }
        if (other == 3) {
            JOptionPane.showMessageDialog(null, "You Lose", "Lose", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            new Game().setVisible(true);

            return true;

        }
        return false;
    }

    boolean check() {
        if (checkDig() || checkRow() || checkCol()) {
            return true;
        }
        return false;
    }

    boolean tryToWinComputer() {
        for (int i = 0; i < 3; i++) {
            int c = 0;
            int ind = -1;
            for (int j = 0; j < 3; j++) {
                if (matrix[i][j] == 2) {
                    ++c;
                }
                if (matrix[i][j] == 0) {
                    ind = j;
                }
            }

            if (c == 2 && ind != -1) {
                return mark(i, ind);
            }
        }

        for (int i = 0; i < 3; i++) {
            int c = 0;
            int ind = -1;
            for (int j = 0; j < 3; j++) {
                if (matrix[j][i] == 2) {
                    ++c;
                }
                if (matrix[j][i] == 0) {
                    ind = j;
                }
            }

            if (c == 2 && ind != -1) {
                return mark(ind, i);
            }
        }

        int c = 0;
        int ind = -1;
        for (int i = 0; i < 3; i++) {
            if (matrix[i][i] == 2) {
                ++c;
            }
            if (matrix[i][i] == 0) {
                ind = i;
            }
        }
        if (c == 2 && ind != -1) {
            return mark(ind, ind);
        }

        c = 0;
        int row = -1;
        int col = 0;
        for (int i = 0, j = 2; i < 3; i++, j--) {
            if (matrix[i][j] == 1) {
                c++;
            }
            if (matrix[i][j] == 0) {
                row = i;
                col = j;
            }
        }
        if (c == 2 && row != -1) {
            return mark(row, col);
        }
        return false;
    }

    boolean tryToHandle() {

        for (int i = 0; i < 3; i++) {
            int c = 0;
            int ind = -1;
            for (int j = 0; j < 3; j++) {
                if (matrix[i][j] == 1) {
                    ++c;
                }
                if (matrix[i][j] == 0) {
                    ind = j;
                }
            }

            if (c == 2 && ind != -1) {

                return mark(i, ind);
            }
        }

        for (int i = 0; i < 3; i++) {
            int c = 0;
            int ind = -1;
            for (int j = 0; j < 3; j++) {
                if (matrix[j][i] == 1) {
                    ++c;
                }

                if (matrix[j][i] == 0) {
                    ind = j;
                }
            }

            if (c == 2 && ind != -1) {
                return mark(ind, i);
            }
        }

        int c = 0;
        int ind = -1;
        for (int i = 0; i < 3; i++) {
            if (matrix[i][i] == 1) {
                ++c;
            }
            if (matrix[i][i] == 0) {
                ind = i;
            }
        }
        if (c == 2 && ind != -1) {
            return mark(ind, ind);
        }
        c = 0;
        int row = -1;
        int col = 0;
        for (int i = 0, j = 2; i < 3; i++, j--) {
            if (matrix[i][j] == 1) {
                c++;
            }
            if (matrix[i][j] == 0) {
                row = i;
                col = j;
            }
        }
        if (c == 2 && row != -1) {
            return mark(row, col);
        }
        return false;
    }

    boolean isDraw() {
        int c = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (matrix[i][j] != 0) {
                    ++c;
                }
            }
        }
        return c == 9;
    }

    void gameLogic() {

        if (!turn) {

            if (check()) {
                return;
            }

            if (isDraw()) {
                JOptionPane.showMessageDialog(null, "Match Draw", "Draw", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
                new Game().setVisible(true);
                return;

            }

            if (!tryToWinComputer()) {
                if (!tryToHandle()) {

                    int row = (int) (Math.random() * 3);
                    int col = (int) (Math.random() * 3);

                    while (!mark(row, col)) {
                        row = (int) (Math.random() * 3);
                        col = (int) (Math.random() * 3);
                    }
                }
            }
            turn = !turn;
        }

        check();
        if (stop) {
            this.dispose();
            new Game().setVisible(true);
        }
        if (isDraw()) {
            JOptionPane.showMessageDialog(null, "Match Draw", "Draw", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
            new Game().setVisible(true);

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
